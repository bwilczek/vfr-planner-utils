/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import { ISO31661Alpha2CountryCode } from "./country_code.js";

export enum Type {
  Airport,
  GliderSite,
  CivilAirfield,
  InternationalAirport,
  MilitaryHeliport,
  MilitaryAerodrome,
  UltraLightFlyingSite,
  CivilHeliport,
  ClosedAerodrome,
  AirportRespAirfieldIfr,
  WaterAirfield,
  LandingStrip,
  AgriculturalLandingStrip,
  Altiport
}

export enum OperationsType {
  Active,
  TemporarilyClosed,
  Closed
}

export enum FrequencyType {
  Approach,
  APRON,
  Arrival,
  Center,
  CTAF,
  Delivery,
  Departure,
  FIS,
  Gliding,
  Ground,
  Information,
  Multicom,
  Unicom,
  Radar,
  Tower,
  ATIS,
  Radio,
  Other,
  AIRMET,
  AWOS,
  Lights,
  VOLMET,
  AFIS  
}

export const frequencyTypeToString = (f: FrequencyType | undefined): string => {
  if(!f) return "unknown"
  
  return FrequencyType[f] || "unknown"
}

export enum SurfaceMaterial {
  Asphalt,
  Concrete,
  Grass,
  Sand,
  Water,
  BituminousTarOrAsphalt,
  Brick,
  MacadamOrTarmac,
  Stone,
  Coral,
  Clay,
  Laterite,
  Gravel,
  Earth,
  Ice,
  Snow,
  ProtectiveLaminate,
  Metal,
  LandingMatPortableSystem,
  PiercedSteelPlanking,
  Wood,
  NonBituminousMix,
  Unknown
}

export enum SurfaceCondition {
  Good,
  Fair,
  Poor,
  Unsafe,
  Deformed,
  Unknown  
}

/**
* Response payload of an airport instance.
*/
// export interface HttpsApiCoreOpenaipNetApiSchemasResponseAirportAirportSchemaJson {
export interface AirportPayload {
 /**
  * The document's internal reference ID value.
  */
 _id?: string;
 name?: string;
 icaoCode?: string;
 iataCode?: string;
 altIdentifier?: string;
 /**
  * The type of the airport. Possible values:
  *
  *  0: Airport (civil/military)
  *
  * 1: Glider Site
  *
  * 2: Airfield Civil
  *
  * 3: International Airport
  *
  * 4: Heliport Military
  *
  * 5: Military Aerodrome
  *
  * 6: Ultra Light Flying Site
  *
  * 7: Heliport Civil
  *
  * 8: Aerodrome Closed
  *
  * 9: Airport resp. Airfield IFR
  *
  * 10: Airfield Water
  *
  * 11: Landing Strip
  *
  * 12: Agricultural Landing Strip
  *
  * 13: Altiport
  */
 type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;
 country?: ISO31661Alpha2CountryCode;
 geometry?: {
   type: "Point";
   /**
    * @minItems 2
    * @maxItems 2
    */
   coordinates: [number, number];
 };
 elevation?: {
   value: number;
   /**
    * The elevation unit. Always 'meters'.
    */
   unit: 0;
   /**
    * The elevation reference datum. Always 'MSL'.
    */
   referenceDatum?: 1;
 };
 elevationGeoid?: {
   /**
    * Height above ellipsoid in meters.
    */
   hae: number;
   /**
    * Height of geoid in meters.
    */
   geoidHeight: number;
 };
 /**
  * @minItems 1
  */
 trafficType?: [0 | 1, ...(0 | 1)[]];
 magneticDeclination?: number;
 ppr?: boolean;
 private?: boolean;
 skydiveActivity?: boolean;
 winchOnly?: boolean;
 services?: {
   fuelTypes?: (0 | 1 | 2 | 3 | 4 | 5 | 6)[];
   gliderTowing?: (0 | 1 | 2 | 3 | 4 | 5)[];
   handlingFacilities?: (0 | 1 | 2 | 3 | 4)[];
   passengerFacilities?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)[];
 };
 frequencies?: {
   /**
    * The document's internal reference ID value.
    */
   _id?: string;
   value: string;
   /**
    * The frequency unit. Always 'MHz'.
    */
   unit: 2;
   /**
    * The frequency type. Possible values:
    *
    *  0: Approach
    *
    * 1: APRON
    *
    * 2: Arrival
    *
    * 3: Center
    *
    * 4: CTAF
    *
    * 5: Delivery
    *
    * 6: Departure
    *
    * 7: FIS
    *
    * 8: Gliding
    *
    * 9: Ground
    *
    * 10: Information
    *
    * 11: Multicom
    *
    * 12: Unicom
    *
    * 13: Radar
    *
    * 14: Tower
    *
    * 15: ATIS
    *
    * 16: Radio
    *
    * 17: Other
    *
    * 18: AIRMET
    *
    * 19: AWOS
    *
    * 20: Lights
    *
    * 21: VOLMET
    *
    * 22: AFIS
    */
   type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22;
   name?: string;
   primary: boolean;
   publicUse: boolean;
   remarks?: string;
 }[];
 runways?: {
   /**
    * The document's internal reference ID value.
    */
   _id?: string;
   designator: string;
   trueHeading: number;
   alignedTrueNorth: boolean;
   /**
    * The type of the operations. Possible values:
    *
    *  0: Active
    *
    * 1: Temporarily Closed
    *
    * 2: Closed
    */
   operations: 0 | 1 | 2;
   mainRunway: boolean;
   /**
    * Allowed take-off/landing turn directions for this runway. Possible values:
    *
    *  0: Right
    *
    * 1: Left
    *
    * 2: Both
    */
   turnDirection?: 0 | 1 | 2;
   landingOnly?: boolean;
   takeOffOnly?: boolean;
   surface: {
     /**
      * @minItems 1
      */
     composition: [
       0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22,
       ...(0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22)[]
     ];
     /**
      * The runway main composite. Possible values:
      *
      *  0: Asphalt
      *
      * 1: Concrete
      *
      * 2: Grass
      *
      * 3: Sand
      *
      * 4: Water
      *
      * 5: Bituminous tar or asphalt ("earth cement")
      *
      * 6: Brick
      *
      * 7: Macadam or tarmac surface consisting of water-bound crushed rock
      *
      * 8: Stone
      *
      * 9: Coral
      *
      * 10: Clay
      *
      * 11: Laterite - a high iron clay formed in tropical areas
      *
      * 12: Gravel
      *
      * 13: Earth
      *
      * 14: Ice
      *
      * 15: Snow
      *
      * 16: Protective laminate usually made of rubber
      *
      * 17: Metal
      *
      * 18: Landing mat portable system usually made of aluminium
      *
      * 19: Pierced steel planking
      *
      * 20: Wood
      *
      * 21: Non Bituminous mix
      *
      * 22: Unknown
      */
     mainComposite:
       | 0
       | 1
       | 2
       | 3
       | 4
       | 5
       | 6
       | 7
       | 8
       | 9
       | 10
       | 11
       | 12
       | 13
       | 14
       | 15
       | 16
       | 17
       | 18
       | 19
       | 20
       | 21
       | 22;
     /**
      * The runway main composite. Possible values:
      *
      *  0: Good
      *
      * 1: Fair
      *
      * 2: Poor
      *
      * 3: Unsafe
      *
      * 4: Deformed
      *
      * 5: Unknown
      */
     condition: 0 | 1 | 2 | 3 | 4 | 5;
     mtow?: ({
       value: number;
       /**
        * The maximum take-off weight permitted on the runway. Always 'tons'.
        */
       unit: 9;
     } | null) &
       (
         | ({
             value: number;
             /**
              * The maximum take-off weight permitted on the runway. Always 'tons'.
              */
             unit: 9;
           } | null)
         | (null &
             ({
               value: number;
               /**
                * The maximum take-off weight permitted on the runway. Always 'tons'.
                */
               unit: 9;
             } | null))
       );
     pcn?: (string | null) & (((string | null) & string) | (null & (string | null)));
     remarks?: string;
   };
   dimension: {
     length: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
     width: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
   };
   declaredDistance: {
     tora?: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
     toda?: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
     asda?: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
     lda?: {
       value: number;
       /**
        * The distance unit. Always meters.
        */
       unit: 0;
     };
   };
   thresholdLocation?: {
     geometry: {
       type: "Point";
       /**
        * @minItems 2
        * @maxItems 2
        */
       coordinates: [number, number];
     };
     elevation: {
       value: number;
       /**
        * The elevation unit. Always 'meters'.
        */
       unit: 0;
       /**
        * The elevation reference datum. Always 'MSL'.
        */
       referenceDatum?: 1;
     };
   };
   exclusiveAircraftType?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13)[];
   pilotCtrlLighting?: boolean;
   lightingSystem?: (0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9)[];
   visualApproachAids?: (0 | 1 | 2 | 3 | 4)[];
   instrumentApproachAids?: {
     /**
      * The document's internal reference ID value.
      */
     _id?: string;
     identifier?: string;
     frequency: {
       value: string;
       /**
        * The navaid frequency. Possible values:
        *
        * 1: kHz
        *
        * 2: MHz
        */
       unit: 1 | 2;
     };
     channel?: string;
     alignedTrueNorth: boolean;
     /**
      * Instrument approach type. Possible values:
      *
      *  0: ILS - Instrument Landing System
      *
      * 1: LOC - Localizer Approach
      *
      * 2: LDA - Localizer Type Directional Aid Approach
      *
      * 3: L- Locator (Compass Locator)
      *
      * 4: DME - Distance Measuring Equipment
      *
      * 5: GP - Glide Path
      */
     type: 0 | 1 | 2 | 3 | 4 | 5;
     /**
      * Defines the hours of operation for this instrument approach aid.
      */
     hoursOfOperation: {
       /**
        * @minItems 1
        */
       operatingHours?: [
         (
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               startTime: string;
               endTime: string;
               sunrise: false;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               startTime: string;
               sunrise: false;
               sunset: true;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               endTime: string;
               sunrise: true;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               sunrise: false;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               sunrise: false;
               sunset: false;
               byNotam: true;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
         ),
         ...(
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               startTime: string;
               endTime: string;
               sunrise: false;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               startTime: string;
               sunrise: false;
               sunset: true;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               endTime: string;
               sunrise: true;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               sunrise: false;
               sunset: false;
               byNotam: false;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
           | {
               dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
               sunrise: false;
               sunset: false;
               byNotam: true;
               publicHolidaysExcluded: boolean;
               remarks?: string;
             }
         )[]
       ];
       remarks?: string;
     };
     remarks?: string;
   }[];
   remarks?: string;
 }[];
 /**
  * Defines the hours of operation for this airport.
  */
 hoursOfOperation?: {
   /**
    * @minItems 1
    */
   operatingHours?: [
     (
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           startTime: string;
           endTime: string;
           sunrise: false;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           startTime: string;
           sunrise: false;
           sunset: true;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           endTime: string;
           sunrise: true;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           sunrise: false;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           sunrise: false;
           sunset: false;
           byNotam: true;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
     ),
     ...(
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           startTime: string;
           endTime: string;
           sunrise: false;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           startTime: string;
           sunrise: false;
           sunset: true;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           endTime: string;
           sunrise: true;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           sunrise: false;
           sunset: false;
           byNotam: false;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
       | {
           dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
           sunrise: false;
           sunset: false;
           byNotam: true;
           publicHolidaysExcluded: boolean;
           remarks?: string;
         }
     )[]
   ];
   remarks?: string;
 };
 contact?: string;
 remarks?: string;
 telephoneServices?: {
   name: string;
   phoneNumber: string;
   remarks?: string;
 }[];
 images?: {
   /**
    * The document's internal reference ID value.
    */
   _id?: string;
   filename: string;
   description?: string;
 }[];
 /**
  * UID of user that created this document.
  */
 createdBy?: string;
 /**
  * UID of user that updated this document.
  */
 updatedBy?: string;
 /**
  * The creation date for this document as ISO 8601 date.
  */
 createdAt?: string;
 /**
  * The updated date for this document as ISO 8601 date.
  */
 updatedAt?: string;
//  [k: string]: unknown;
}
