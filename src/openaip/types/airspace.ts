/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import { ISO31661Alpha2CountryCode } from "./country_code.js";

export enum Type {
  Other,
  Restricted,
  Danger,
  Prohibited,
  CTR, // Controlled Tower Region
  TMZ, // Transponder Mandatory Zone
  RMZ, // Radio Mandatory Zone
  TMA, // Terminal Maneuvering Area
  TRA, // Temporary Reserved Area
  TSA, // Temporary Segregated Area
  FIR, // Flight Information Region
  UIR, // Upper Flight Information Region
  ADIZ, // Air Defense Identification Zone
  ATZ, // Airport Traffic Zone
  MATZ, // Military Airport Traffic Zone
  Airway,
  MTR, // Military Training Route
  AlertArea,
  WarningArea,
  ProtectedArea,
  HTZ, // Helicopter Traffic Zone
  GlidingSector,
  TRP, // Transponder Setting
  TIZ, // Traffic Information Zone
  TIA, // Traffic Information Area
  MTA, // Military Training Area
  CTA, // Control Area
  ACC, // ACC Sector
  AerialSportingOrRecreationalActivity,
  LowAltitudeOverflightRestriction,
  MRT, // Military Route
  TFR, // TSA/TRA Feeding Route
  VFRSector,
  FISSector,
  LTA, // Lower Traffic Area
  UTA // Upper Traffic Area
}

export enum IcaoClass {
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  Unclassified = 8
}

export enum Activity {
  None,
  Parachuting,
  Aerobatics,
  AeroclubAndArialWorkArea,
  UltraLightMachineActivity,
  HangGlidingOrParagliding
}

export enum VerticalLimitUnit {
  Meter,
  Feet,
  FlightLevel = 6
}

export enum VerticalLimitDatum {
  GND,
  MSL,
  STD
}  

/**
 * Response payload of a airspace instance.
 */
export interface AirspacePayload {
  /**
   * The document's internal reference ID value.
   */
  _id?: string;
  name?: string;
  /**
   *  Indicates if this airspace was created by a data ingestion process - this also means that it will be removed when the next data ingestion process is run. During data ingestion, only airspaces that are marked as "true" will be removed/replaced. This flag is set internally and cannot be edited.
   */
  dataIngestion?: boolean;
  /**
   * The airspace type. Possible values:
   *
   *  0: Other
   *
   * 1: Restricted
   *
   * 2: Danger
   *
   * 3: Prohibited
   *
   * 4: Controlled Tower Region (CTR)
   *
   * 5: Transponder Mandatory Zone (TMZ)
   *
   * 6: Radio Mandatory Zone (RMZ)
   *
   * 7: Terminal Maneuvering Area (TMA)
   *
   * 8: Temporary Reserved Area (TRA)
   *
   * 9: Temporary Segregated Area (TSA)
   *
   * 10: Flight Information Region (FIR)
   *
   * 11: Upper Flight Information Region (UIR)
   *
   * 12: Air Defense Identification Zone (ADIZ)
   *
   * 13: Airport Traffic Zone (ATZ)
   *
   * 14: Military Airport Traffic Zone (MATZ)
   *
   * 15: Airway
   *
   * 16: Military Training Route (MTR)
   *
   * 17: Alert Area
   *
   * 18: Warning Area
   *
   * 19: Protected Area
   *
   * 20: Helicopter Traffic Zone (HTZ)
   *
   * 21: Gliding Sector
   *
   * 22: Transponder Setting (TRP)
   *
   * 23: Traffic Information Zone (TIZ)
   *
   * 24: Traffic Information Area (TIA)
   *
   * 25: Military Training Area (MTA)
   *
   * 26: Control Area (CTA)
   *
   * 27: ACC Sector (ACC)
   *
   * 28: Aerial Sporting Or Recreational Activity
   *
   * 29: Low Altitude Overflight Restriction
   *
   * 30: Military Route (MRT)
   *
   * 31: TSA/TRA Feeding Route (TFR)
   *
   * 32: VFR Sector
   *
   * 33: FIS Sector
   *
   * 34: Lower Traffic Area (LTA)
   *
   * 35: Upper Traffic Area (UTA)
   */
  type?:
    | 0
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 27
    | 28
    | 29
    | 30
    | 31
    | 32
    | 33
    | 34
    | 35;
  /**
   * The airspace ICAO class. Possible values:
   *
   *  0: A
   *
   * 1: B
   *
   * 2: C
   *
   * 3: D
   *
   * 4: E
   *
   * 5: F
   *
   * 6: G
   *
   * 8: Unclassified / Special Use Airspace (SUA)
   */
  icaoClass?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 8;
  /**
   * The intended activity for this airspace if defined in 'ENR 5.5 Aerial sporting and recreational activities'. The default activity is 'NONE' which applies to all other airspaces not defined in ENR 5.5. Possible values:
   *
   *  0: None - No specific activity (default)
   *
   * 1: Parachuting Activity
   *
   * 2: Aerobatics Activity
   *
   * 3: Aeroclub And Arial Work Area
   *
   * 4: Ultra Light Machine (ULM) Activity
   *
   * 5: Hang Gliding/Paragliding
   */
  activity?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
  onDemand?: boolean;
  onRequest?: boolean;
  byNotam?: boolean;
  /**
   * Indicates whether this airspace is related to a special agreement or not. Normally, airspaces are not based on a "special agreement" but there may be airspaces that may only be used by members of a certain club or if they personally signed a letter of agreement.
   */
  specialAgreement?: boolean;
  /**
   * An airspace that is most often not found in eAIPs but is defined by other regional/national authorities, e.g. natural reserves and monuments in the US. Those airspaces are not official but authorities request compliance of those if possible. In several cases, aircraft like UAVs are not allowed to enter those airspaces.
   */
  requestCompliance?: boolean;
  geometry?: {
    type: "Polygon";
    /**
     * @minItems 1
     * @maxItems 1
     */
    coordinates: [
      [[number, number], [number, number], [number, number], [number, number], ...[number, number][]]
    ];
  };
  country?: ISO31661Alpha2CountryCode;
  /**
   * Defines an airspace vertical limit. The vertical limit is a combination of an integer value, a measurement unit and a reference datum.
   */
  upperLimit?: {
    value: number;
    /**
     * The vertical limit unit. Possbile values:
     *
     *  0: Meter
     *
     *  1: Feet
     *
     *  6: Flight Level
     */
    unit: 1 | 0 | 6;
    /**
     * The reference datum. Possible values:
     *
     *  0: GND
     *
     * 1: MSL
     *
     * 2: STD
     */
    referenceDatum: 0 | 1 | 2;
  };
  /**
   * Defines an airspace vertical limit. The vertical limit is a combination of an integer value, a measurement unit and a reference datum.
   */
  lowerLimit?: {
    value: number;
    /**
     * The vertical limit unit. Possbile values:
     *
     *  0: Meter
     *
     *  1: Feet
     *
     *  6: Flight Level
     */
    unit: 1 | 0 | 6;
    /**
     * The reference datum. Possible values:
     *
     *  0: GND
     *
     * 1: MSL
     *
     * 2: STD
     */
    referenceDatum: 0 | 1 | 2;
  };
  /**
   * Defines the airspace maximum upper vertical limit. This vertical limit is only rarely used in cases where an airspace is required to have a maximum upper vertical limit, e.g. "5000ft MSL but at most 8000ft MSL by request".
   */
  upperLimitMax?: {
    value: number;
    /**
     * The vertical limit unit. Possbile values:
     *
     *  0: Meter
     *
     *  1: Feet
     *
     *  6: Flight Level
     */
    unit: 1 | 0 | 6;
    /**
     * The reference datum. Possible values:
     *
     *  0: GND
     *
     * 1: MSL
     *
     * 2: STD
     */
    referenceDatum: 0 | 1 | 2;
  };
  /**
   * Defines the airspace minimum lower vertical limit. This vertical limit is only rarely used in cases where an airspace is required to have a bare minium vertical limit, e.g. "5000ft MSL but at least 1000ft AGL".
   */
  lowerLimitMin?: {
    value: number;
    /**
     * The vertical limit unit. Possbile values:
     *
     *  0: Meter
     *
     *  1: Feet
     *
     *  6: Flight Level
     */
    unit: 1 | 0 | 6;
    /**
     * The reference datum. Possible values:
     *
     *  0: GND
     *
     * 1: MSL
     *
     * 2: STD
     */
    referenceDatum: 0 | 1 | 2;
  };
  frequencies?: {
    /**
     * The document's internal reference ID value.
     */
    _id?: string;
    value: string;
    /**
     * The frequency unit. Always 'MHz'.
     */
    unit: 2;
    name?: string;
    primary?: boolean;
    remarks?: string;
  }[];
  transponderSettings?: {
    code: string;
    primary: boolean;
    remarks?: string;
  }[];
  /**
   * Defines the hours of operation for this airspace.
   */
  hoursOfOperation?: {
    /**
     * @minItems 1
     */
    operatingHours?: [
      (
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            startTime: string;
            endTime: string;
            sunrise: false;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            startTime: string;
            sunrise: false;
            sunset: true;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            endTime: string;
            sunrise: true;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            sunrise: false;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            sunrise: false;
            sunset: false;
            byNotam: true;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
      ),
      ...(
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            startTime: string;
            endTime: string;
            sunrise: false;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            startTime: string;
            sunrise: false;
            sunset: true;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            endTime: string;
            sunrise: true;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            sunrise: false;
            sunset: false;
            byNotam: false;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
        | {
            dayOfWeek: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            sunrise: false;
            sunset: false;
            byNotam: true;
            publicHolidaysExcluded: boolean;
            remarks?: string;
          }
      )[]
    ];
    remarks?: string;
  };
  activeFrom?: string;
  activeUntil?: string;
  remarks?: string;
  /**
   * UID of user that created this document.
   */
  createdBy?: string;
  /**
   * UID of user that updated this document.
   */
  updatedBy?: string;
  /**
   * The creation date for this document as ISO 8601 date.
   */
  createdAt?: string;
  /**
   * The updated date for this document as ISO 8601 date.
   */
  updatedAt?: string;
}
